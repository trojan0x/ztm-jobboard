{"version":3,"file":"static/js/59.ac05fb0f.chunk.js","mappings":"iMAcMA,EAA8BC,OAAOC,QAAQC,EAAAA,GAE/CC,EAAuB,GA+H3B,UA7HA,YAAkC,IAAD,IAAZC,KAAAA,OAAY,MAAL,EAAK,EAC/B,GAAsDC,EAAAA,EAAAA,UAAS,IAA/D,eAAOC,EAAP,KAA4BC,EAA5B,MACAC,EAAAA,EAAAA,YAAU,WAOR,IAAIC,GAAiC,EASrC,OARIA,GACFC,MAAM,wCACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACDL,GAAgCF,EAAuBO,MAE5DC,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,MAE3B,WACLP,GAAiC,KAElC,IAEH,IAAIU,EAA0Bb,EAAoBc,KAAI,kBAAuB,CAC3EC,KADoD,EAAGA,KAEvDC,OAFoD,EAASA,WASzDC,EAAK,CACTC,QAAS,iBACTF,OAAQ,CAAC,IAAK,GACdG,aAAcvB,EAAAA,EAAAA,mBAIZwB,EAAsC,IAC1C,WACE,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,EAA4B6B,OAAQD,IACtD,IAAK,IAAIE,EAAI,EAAGA,EAAIV,EAAmBS,OAAQC,IAE3C9B,EAA4B4B,GAAG,GAAGG,gBAClCX,EAAmBU,GAAGR,KAAKS,eAE3BJ,EAA+BK,KAAK,CAClCP,QAASzB,EAA4B4B,GAAG,GACxCL,OAAQH,EAAmBU,GAAGP,OAC9BG,aAAc1B,EAA4B4B,GAAG,KAMrDD,EAA+BK,KAAKR,GAGtCS,GAqBA,IAAMC,EAAeP,EAA+BN,KAClD,YAA6C,IAA1CI,EAAyC,EAAzCA,QAASF,EAAgC,EAAhCA,OAAQG,EAAwB,EAAxBA,aACdS,EACe,IAAjBT,EACIA,EAAe,mBAAqBD,EACpCC,EAAe,oBAAsBD,EAC3C,OACE,UAAC,IAAD,CAAsBW,SAAU,CAACb,EAAO,GAAIA,EAAO,IAAnD,WACE,SAAC,IAAD,UAAUY,KACV,SAAC,IAAD,UAAQA,MAFGV,MAQbY,EACJjC,EAAgByB,OAAS,EACrB,CAACzB,EAAgB,GAAGkC,IAAKlC,EAAgB,GAAGmC,KAC5C,CAAC,WAAY,UAEnB,OACE,gBAAKC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,OAAQ,GAArD,UACE,UAAC,IAAD,CACEN,OAAQA,EACRhC,KAAMA,EACNuC,QAAS,EACTC,QAAS,GACTC,oBAAoB,EACpBC,aAAa,EACbC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAU,EACVC,SAAS,EACTC,cAAe,IAXjB,WAaE,SAAC,IAAD,CACEC,YAAY,2EACZC,IAAI,uDAELpB","sources":["components/Map.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport {\n  MapContainer as LeafletMap,\n  Marker,\n  Popup,\n  TileLayer,\n  Tooltip,\n} from \"react-leaflet\"\n\nimport { countriesWithNumOfDevsObj } from \"../util/UsersDataCleanup\"\n\n// Array of country names and number of devs in those countries\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\n\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n  const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n  useEffect(() => {\n    // If the user goes back to home before map has loaded, the Map component will unmount\n    // but since fetch cannot be cancelled, react will try to setSate on an unmounted component\n    // when the fetch Promise resolves\n    // This throws memory leak error so isComponentSubscribedToPromise is used as a flag\n    // to check if the component was unmounted before setting state\n    // and setAllCountriesLatLang is not called if Map component has unmounted\n    let isComponentSubscribedToPromise = true\n    if (isComponentSubscribedToPromise) {\n      fetch(`https://restcountries.eu/rest/v2/all`)\n        .then((resp) => resp.json())\n        .then((data) => {\n          if (isComponentSubscribedToPromise) setAllCountriesLatLang(data)\n        })\n        .catch((err) => console.error(err))\n    }\n    return () => {\n      isComponentSubscribedToPromise = false\n    }\n  }, [])\n\n  let countriesLatLngArr: any = allCountriesLatLang.map(({ name, latlng }) => ({\n    name,\n    latlng,\n  }))\n\n  /* \n  Made separate variable for UK because name of UK in API is \"United Kingdom \n  of Great Britain and Northern Ireland\" which probably none of the users will use\n  */\n  const UK = {\n    country: \"United Kingdom\",\n    latlng: [54, -2], // copied from API\n    numberOfDevs: countriesWithNumOfDevsObj[\"United Kingdom\"],\n  }\n\n  // Two nested for loops are okay as array items will always be < 250 in both arrays\n  let finalArrayWithCountryAndLatLng: any = []\n  function finalCountryAndLocationArray() {\n    for (let i = 0; i < countryNamesAndNumOfDevsArr.length; i++) {\n      for (let j = 0; j < countriesLatLngArr.length; j++) {\n        if (\n          countryNamesAndNumOfDevsArr[i][0].toLowerCase() ===\n          countriesLatLngArr[j].name.toLowerCase()\n        ) {\n          finalArrayWithCountryAndLatLng.push({\n            country: countryNamesAndNumOfDevsArr[i][0],\n            latlng: countriesLatLngArr[j].latlng,\n            numberOfDevs: countryNamesAndNumOfDevsArr[i][1],\n          })\n        }\n      }\n    }\n    // Add UK to final array of countries and co-ordinates\n    finalArrayWithCountryAndLatLng.push(UK)\n    return finalArrayWithCountryAndLatLng\n  }\n  finalCountryAndLocationArray()\n  // console.log(finalArrayWithCountryAndLatLng);\n\n  // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n  // Might need it to check for unexpected repeated entries which is easier with sorted countries\n  /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n  const markersArray = finalArrayWithCountryAndLatLng.map(\n    ({ country, latlng, numberOfDevs }: any) => {\n      let numberOfDevsText =\n        numberOfDevs === 1\n          ? numberOfDevs + \" Developer from \" + country\n          : numberOfDevs + \" Developers from \" + country\n      return (\n        <Marker key={country} position={[latlng[0], latlng[1]]}>\n          <Tooltip>{numberOfDevsText}</Tooltip>\n          <Popup>{numberOfDevsText}</Popup>\n        </Marker>\n      )\n    }\n  )\n\n  const center: any =\n    centerLatLngArr.length > 0\n      ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n      : [55.378052, -3.435973]\n\n  return (\n    <div style={{ height: \"90vh\", width: \"100%\", margin: 0 }}>\n      <LeafletMap\n        center={center}\n        zoom={zoom}\n        minZoom={1}\n        maxZoom={10}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {markersArray}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default SimpleMap\n"],"names":["countryNamesAndNumOfDevsArr","Object","entries","countriesWithNumOfDevsObj","centerLatLngArr","zoom","useState","allCountriesLatLang","setAllCountriesLatLang","useEffect","isComponentSubscribedToPromise","fetch","then","resp","json","data","catch","err","console","error","countriesLatLngArr","map","name","latlng","UK","country","numberOfDevs","finalArrayWithCountryAndLatLng","i","length","j","toLowerCase","push","finalCountryAndLocationArray","markersArray","numberOfDevsText","position","center","lat","lng","style","height","width","margin","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","attribution","url"],"sourceRoot":""}